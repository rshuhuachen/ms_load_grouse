axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0))) -> posterior_gerpregions
posterior_gerpregions
png(file = "plots/main/fig_2c.png", width=600, height=800)
posterior_gerpregions
dev.off()
#### plot d - high per region ####
load(file = "output/models/per_gene_region/lms_total_high_promoter.RData")
high_promoter <- brm_load_t
r2_bayes(high_promoter)
load(file = "output/models/per_gene_region/lms_total_high_tss.RData")
high_tss <- brm_load_t
r2_bayes(high_tss)
load(file = "output/models/per_gene_region/lms_total_high_exon.RData")
high_exon <- brm_load_t
r2_bayes(high_exon)
load(file = "output/models/per_gene_region/lms_total_high_intron.RData")
high_intron <- brm_load_t
r2_bayes(high_intron)
rm(brm_load_t)
#extract intervals and areas
#total
high_promoter_interval <- mcmc_intervals_data(high_promoter, prob =0.8, prob_outer = 0.95) %>%
subset(grepl("scaletotal_load", parameter))
high_tss_interval <- mcmc_intervals_data(high_tss, prob =0.8, prob_outer = 0.95) %>%
subset(grepl("scaletotal_load", parameter))
high_intron_interval <- mcmc_intervals_data(high_intron, prob =0.8, prob_outer = 0.95) %>%
subset(grepl("scaletotal_load", parameter))
high_exon_interval <- mcmc_intervals_data(high_exon, prob =0.8, prob_outer = 0.95) %>%
subset(grepl("scaletotal_load", parameter))
brms_high_regions_interval <- rbind(high_promoter_interval, high_tss_interval,
high_intron_interval, high_exon_interval)
brms_high_regions_interval$region <- c("Promoter", "TSS", "Intron", "Exon")
#rearrange order for visualization
brms_high_regions_interval$region  <- factor(as.factor(brms_high_regions_interval$region),
levels= c("Exon", "Intron",
"TSS", "Promoter"))
#total
high_promoter_area <- mcmc_areas_data(high_promoter) %>%
subset(grepl("scaletotal_load", parameter))
high_tss_area <- mcmc_areas_data(high_tss) %>%
subset(grepl("scaletotal_load", parameter))
high_intron_area <- mcmc_areas_data(high_intron) %>%
subset(grepl("scaletotal_load", parameter))
high_exon_area <- mcmc_areas_data(high_exon) %>%
subset(grepl("scaletotal_load", parameter))
brms_high_regions_area <- rbind(high_promoter_area, high_tss_area,
high_intron_area, high_exon_area)
obs <- nrow(high_promoter_area)
brms_high_regions_area$region <- c(rep(c("Promoter", "TSS", "Intron", "Exon"), each = obs))
#rearrange order for visualization
brms_high_regions_area$region  <- factor(as.factor(brms_high_regions_area$region),
levels= c( "Exon","Intron",
"TSS", "Promoter"))
# split by interval
brms_high_regions <- split(brms_high_regions_area, brms_high_regions_area$interval)
brms_high_regions$bottom <- brms_high_regions$outer %>%
summarise(
ll = min(.data$x),
hh = max(.data$x),
.groups = "drop_last"
) %>%
ungroup()
### divide up between the two traits
ggplot(data = brms_high_regions$outer) +
aes(x = .data$x, y = .data$region) +
geom_ridgeline(aes(scale = 0.4, height = scaled_density, fill = region, col = region))+
geom_segment(data=brms_high_regions_interval, aes(x = l, xend = h, yend = region), col = "black", linewidth=3)+
geom_segment(data=brms_high_regions_interval, aes(x = ll, xend = hh, yend = region), col = "black")+
geom_point(data=brms_high_regions_interval, aes(x = m, y = region), fill="white",  col = "black", shape=21, size = 6) +
geom_vline(xintercept = 0, col = "#ca562c", linetype="longdash", linewidth=0.6)+
scale_fill_manual(values =alpha(c(clr_high, clr_high, clr_high, clr_high), 0.7)) + #
scale_color_manual(values =c(clr_high, clr_high, clr_high, clr_high)) +
labs(x = expression("Standardised"~beta), y = "Region", title = "SnpEff")+
annotate("text", label = "Regulatory", y = 3.2, x = 0.2, size = 5.5, angle = -90, col = "grey30") +
geom_segment(x = 0.15, y = 2, yend = 4.5,
col = "grey30")+
annotate("text", label = "Coding", y = 1.17, x = 0.2, size = 5.5, angle = -90, col = "grey30") +
geom_segment(x = 0.15, y = 0.5, yend = 1.8,
col = "grey30")+
scale_x_continuous(labels = c("-0.25", "0.00", ""), breaks = c(-0.25, 0,0.75))+
theme(panel.border = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
legend.position = "none",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0))) -> posterior_highregions
posterior_highregions
png(file = "plots/main/fig_2d.png", width=600, height=800)
posterior_highregions
dev.off()
#packages
pacman::p_load(brms, bayesplot, tidyverse, ggridges, performance)
source("scripts/theme_ggplot.R")
# load data
load(file = "output/models/annual/ams/model_trait_ams_gerp45.RData")
fit_ms_gerp <- fit
#extract intervals and areas
brms_trait_ms_gerp_interval <- mcmc_intervals_data(fit_ms_gerp, prob =0.8, prob_outer = 0.95) %>%
subset(grepl("b_scale", parameter))
brms_trait_ms_gerp_interval <- subset(brms_trait_ms_gerp_interval, parameter != "b_scaletotal_load")
brms_trait_ms_gerp_interval$parameter <- gsub("b_scaleblue", "Blue chroma", brms_trait_ms_gerp_interval$parameter)
brms_trait_ms_gerp_interval$parameter <- gsub("b_scaleeyec", "Eye comb", brms_trait_ms_gerp_interval$parameter)
brms_trait_ms_gerp_interval$parameter <- gsub("b_scalelyre", "Lyre size", brms_trait_ms_gerp_interval$parameter)
brms_trait_ms_gerp_interval$parameter <- gsub("b_scaledist", "Centrality", brms_trait_ms_gerp_interval$parameter)
brms_trait_ms_gerp_interval$parameter <- gsub("b_scalefight", "Fighting", brms_trait_ms_gerp_interval$parameter)
brms_trait_ms_gerp_interval$parameter <- gsub("b_scaleattend", "Attendance", brms_trait_ms_gerp_interval$parameter)
brms_trait_ms_gerp_interval$parameter <- factor(brms_trait_ms_gerp_interval$parameter,
levels = c("Blue chroma", "Eye comb", "Lyre size",
"Centrality", "Fighting", "Attendance"))
#area
brms_trait_ms_gerp_areas <- mcmc_areas_data(fit_ms_gerp) %>%
subset(grepl("b_scale", parameter))
brms_trait_ms_gerp_areas <- subset(brms_trait_ms_gerp_areas, parameter != "b_scaletotal_load")
brms_trait_ms_gerp_areas$parameter <- gsub("b_scaleblue", "Blue chroma", brms_trait_ms_gerp_areas$parameter)
brms_trait_ms_gerp_areas$parameter <- gsub("b_scaleeyec", "Eye comb", brms_trait_ms_gerp_areas$parameter)
brms_trait_ms_gerp_areas$parameter <- gsub("b_scalelyre", "Lyre size", brms_trait_ms_gerp_areas$parameter)
brms_trait_ms_gerp_areas$parameter <- gsub("b_scaledist", "Centrality", brms_trait_ms_gerp_areas$parameter)
brms_trait_ms_gerp_areas$parameter <- gsub("b_scalefight", "Fighting", brms_trait_ms_gerp_areas$parameter)
brms_trait_ms_gerp_areas$parameter <- gsub("b_scaleattend", "Attendance", brms_trait_ms_gerp_areas$parameter)
brms_trait_ms_gerp_areas$parameter <- factor(brms_trait_ms_gerp_areas$parameter,
levels = c("Blue chroma", "Eye comb", "Lyre size",
"Centrality", "Fighting", "Attendance"))
# split by interval
brms_trait_ms_gerp <- split(brms_trait_ms_gerp_areas, brms_trait_ms_gerp_areas$interval)
brms_trait_ms_gerp$bottom <- brms_trait_ms_gerp$outer %>%
summarise(
ll = min(.data$x),
hh = max(.data$x),
.groups = "drop_last"
) %>%
ungroup()
### divide up between the two traits
ggplot(data = brms_trait_ms_gerp$outer) +
aes(x = .data$x, y = .data$parameter) +
geom_ridgeline(aes(scale = 0.4, height = scaled_density, fill = parameter, col = parameter))+
geom_segment(data=brms_trait_ms_gerp_interval, aes(x = l, xend = h, yend = parameter), col = "black", linewidth=3)+
geom_segment(data=brms_trait_ms_gerp_interval, aes(x = ll, xend = hh, yend = parameter), col = "black")+
geom_point(data=brms_trait_ms_gerp_interval, aes(x = m, y = parameter), fill="white",  col = "black", shape=21, size = 6) +
geom_vline(xintercept = 0, col = "#ca562c", linetype="longdash", size = 1.5)+
labs(x = expression("Standardised"~beta), y = "Trait")+
scale_fill_manual(values =alpha(c(clrs_hunting[1],clrs_hunting[1],
clrs_hunting[1],clrs_hunting[1],
clrs_hunting[1],clr_highlight), 0.5)) +
scale_color_manual(values =c(clrs_hunting[1],clrs_hunting[1],
clrs_hunting[1],clrs_hunting[1],
clrs_hunting[1],clr_highlight)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
legend.position = "none",
axis.title.x = element_text(size = 26),
axis.text.x = element_text(size = 26)) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)-> traits_ms_gerp_posterior
traits_ms_gerp_posterior
### load packages ####
pacman::p_load(brms, bayesplot, dplyr, data.table)
### load models ###
#### gerp ####
load(file = "output/models/annual/traits/model_attend_gerp45.RData")
fit_gerp_attend <- fit
load(file = "output/models/annual/traits/model_fight_gerp45.RData")
fit_gerp_fight <- fit
load(file = "output/models/annual/traits/model_dist_gerp45.RData")
fit_gerp_dist <- fit
load(file = "output/models/annual/traits/model_eyec_gerp45.RData")
fit_gerp_eyec <- fit
load(file = "output/models/annual/traits/model_blue_gerp45.RData")
fit_gerp_blue <- fit
load(file = "output/models/annual/traits/model_lyre_gerp45.RData")
fit_gerp_lyre <- fit
load(file = "output/models/annual/ams/model_trait_ams_gerp45.RData")
fit_gerp_ams <- fit
rm(fit)
### snpeff
load(file = "output/models/annual/traits/model_attend_high.RData")
fit_high_attend <- fit
load(file = "output/models/annual/traits/model_fight_high.RData")
fit_high_fight <- fit
load(file = "output/models/annual/traits/model_dist_high.RData")
fit_high_dist <- fit
load(file = "output/models/annual/traits/model_eyec_high.RData")
fit_high_eyec <- fit
load(file = "output/models/annual/traits/model_blue_high.RData")
fit_high_blue <- fit
load(file = "output/models/annual/traits/model_lyre_high.RData")
fit_high_lyre <- fit
load(file = "output/models/annual/ams/model_trait_ams_high.RData")
fit_high_ams <- fit
rm(fit)
### indirect effects loop #####
get_indirect <- function(mediator, method, trait_model, ams_model){
treatment = "b_scaletotal_load"
path1 <- as_draws_df(trait_model, variable =treatment)
path1 <- path1$b_scaletotal_load
path2 <- as_draws_df(ams_model, variable = mediator)
path2 <- unlist(c(path2[,1]))
indirect <- path1*path2
direct <- as_draws_df(ams_model, variable =treatment)
direct <- direct$b_scaletotal_load
total <- indirect + direct
effect_attend <- data.frame(treatment = treatment,
mediator = mediator,
method = method,
indirect_median = round(median(indirect), 2),
indirect_lower = round(quantile(indirect, probs = c(.025)), 2),
indirect_upper = round(quantile(indirect, probs = c(.975)), 2),
direct_median = round(median(direct), 2),
direct_lower = round(quantile(direct, probs = c(.025)), 2),
direct_upper = round(quantile(direct, probs = c(.975)), 2),
total_median = round(median(total), 2),
total_lower = round(quantile(total, probs = c(.025)), 2),
total_upper = round(quantile(total, probs = c(.975)), 2),
path1_median = round(median(path1), 2),
path1_lower = round(quantile(path1, probs = c(.025)), 2),
path1_upper = round(quantile(path1, probs = c(.975)), 2),
path2_median = round(median(path2), 2),
path2_lower = round(quantile(path2, probs = c(.025)), 2),
path2_upper = round(quantile(path2, probs = c(.975)), 2),
indirect_lower_80 = round(quantile(indirect, probs = c(.1)), 2),
indirect_upper_80 = round(quantile(indirect, probs = c(.9)), 2),
direct_lower_80 = round(quantile(direct, probs = c(.1)), 2),
direct_upper_80 = round(quantile(direct, probs = c(.9)), 2))
return(effect_attend)
}
effects <- data.frame(rbind(get_indirect(mediator="b_scalelyre", method = "gerp45",
trait_model=fit_gerp_lyre, ams_model = fit_gerp_ams),
get_indirect(mediator="b_scaleeyec",  method = "gerp45",
trait_model=fit_gerp_eyec, ams_model = fit_gerp_ams),
get_indirect(mediator="b_scaleblue",  method = "gerp45",
trait_model=fit_gerp_blue, ams_model = fit_gerp_ams),
get_indirect(mediator="b_scaleattend",  method = "gerp45",
trait_model=fit_gerp_attend, ams_model = fit_gerp_ams),
get_indirect(mediator="b_scalefight",  method = "gerp45",
trait_model=fit_gerp_fight, ams_model = fit_gerp_ams),
get_indirect(mediator="b_scaledist",  method = "gerp45",
trait_model=fit_gerp_dist, ams_model = fit_gerp_ams),
get_indirect(mediator="b_scalelyre", method = "high",
trait_model=fit_high_lyre, ams_model = fit_high_ams),
get_indirect(mediator="b_scaleeyec",  method = "high",
trait_model=fit_high_eyec, ams_model = fit_high_ams),
get_indirect(mediator="b_scaleblue",  method = "high",
trait_model=fit_high_blue, ams_model = fit_high_ams),
get_indirect(mediator="b_scaleattend",  method = "high",
trait_model=fit_high_attend, ams_model = fit_high_ams),
get_indirect(mediator="b_scalefight",  method = "high",
trait_model=fit_high_fight, ams_model = fit_high_ams),
get_indirect(mediator="b_scaledist",  method = "high",
trait_model=fit_high_dist, ams_model = fit_high_ams)))
write.csv(effects, file = "output/models/annual/direct_indirect_summary.csv", quote=F, row.names = F)
pacman::p_load(brms, bayesplot, tidyverse)
extrafont::loadfonts(device="all")
#adjust pattern here to what models you want to diagnose
#note that the plotting takes a while so this is better to do in smaller batches
output_ams <- list.files(path = "output/models/annual/ams",
pattern = "model*", full.names=T)
output_trait <- list.files(path = "output/models/annual/traits/",
pattern = "model*", full.names=T)
output_total <- list.files(path = "output/models/total_hom_het/",
pattern = "lms*", full.names=T)
output_region <- list.files(path = "output/models/per_gene_region/",
pattern = "lms*", full.names=T)
output <- c(output_ams, output_trait, output_total, output_region)
diagnose_summary <- list()
for (i in 1:length(output)){
#load fit
load(file = output[[i]])
#get posteriors
posterior <- as.array(fit)
log_ps <- log_posterior(fit)
nuts <- nuts_params(fit) #divergence
#get only beta and sd
betas <- variables(fit)[grep("b_", variables(fit))]
sd <- variables(fit)[grep("sd_", variables(fit))]
#global patterns in divergence
diverge_beta <- mcmc_parcoord(posterior, np = nuts, pars= betas)
diverge_sd <- mcmc_parcoord(posterior, np = nuts, pars= sd)
#identify collinearity between parameters
collin_beta <- mcmc_pairs(posterior, np = nuts, pars= betas)
collin_sd <- mcmc_pairs(posterior, np = nuts, pars= sd)
#traceplot
trace_beta <- mcmc_trace(posterior, pars = betas, np = nuts)
trace_sd <- mcmc_trace(posterior, pars = sd, np = nuts)
#rhat
rhat <- mcmc_rhat(brms::rhat(fit))
#effective sample size
neff <- mcmc_neff(neff_ratio(fit))
#autocorrelation
autocor_beta <- mcmc_acf(posterior, pars = betas)
autocor_sd <- mcmc_acf(posterior, pars=sd)
#quick glance results
areas <- mcmc_areas(fit, pars=betas)
#combine in list
diagnosis <- list(diverge_beta = diverge_beta,
diverge_sd = diverge_sd,
collin_beta = collin_beta,
collin_sd = collin_sd,
trace_beta = trace_beta,
trace_sd = trace_sd,
rhat = rhat,
neff = neff,
autocor_beta = autocor_beta,
autocor_sd = autocor_sd,
areas = areas)
modelname <- sub(".*/", "", output[i])
modelname <- sub(".RData", "", modelname)
# save output
pdf(file=paste0("output/models/diagnosis/", modelname, ".pdf"))
diverge_beta
diverge_sd
collin_beta
collin_sd
trace_beta
trace_sd
rhat
neff
autocor_beta
autocor_sd
areas
dev.off()
# add to summary
diagnose_summary[[modelname]] <- diagnosis
}
#Look at individual plots like this:
diagnose_summary$attend_froh$rhat
getwd()
dev.off()
output
diagnose_summary
i=1
load(file = output[[i]])
#get posteriors
posterior <- as.array(fit)
log_ps <- log_posterior(fit)
nuts <- nuts_params(fit) #divergence
#get only beta and sd
betas <- variables(fit)[grep("b_", variables(fit))]
sd <- variables(fit)[grep("sd_", variables(fit))]
#global patterns in divergence
diverge_beta <- mcmc_parcoord(posterior, np = nuts, pars= betas)
diverge_sd <- mcmc_parcoord(posterior, np = nuts, pars= sd)
#identify collinearity between parameters
collin_beta <- mcmc_pairs(posterior, np = nuts, pars= betas)
collin_sd <- mcmc_pairs(posterior, np = nuts, pars= sd)
#traceplot
trace_beta <- mcmc_trace(posterior, pars = betas, np = nuts)
trace_sd <- mcmc_trace(posterior, pars = sd, np = nuts)
#rhat
rhat <- mcmc_rhat(brms::rhat(fit))
#effective sample size
neff <- mcmc_neff(neff_ratio(fit))
#autocorrelation
autocor_beta <- mcmc_acf(posterior, pars = betas)
autocor_sd <- mcmc_acf(posterior, pars=sd)
#quick glance results
areas <- mcmc_areas(fit, pars=betas)
#combine in list
diagnosis <- list(diverge_beta = diverge_beta,
diverge_sd = diverge_sd,
collin_beta = collin_beta,
collin_sd = collin_sd,
trace_beta = trace_beta,
trace_sd = trace_sd,
rhat = rhat,
neff = neff,
autocor_beta = autocor_beta,
autocor_sd = autocor_sd,
areas = areas)
modelname <- sub(".*/", "", output[i])
modelname <- sub(".RData", "", modelname)
modelname
# save output
pdf(file=paste0("output/models/diagnosis/", modelname, ".pdf"))
diverge_beta
diverge_sd
collin_beta
collin_sd
trace_beta
trace_sd
rhat
neff
autocor_beta
autocor_sd
areas
dev.off()
for (i in 1:2){
#load fit
load(file = output[[i]])
#get posteriors
posterior <- as.array(fit)
log_ps <- log_posterior(fit)
nuts <- nuts_params(fit) #divergence
#get only beta and sd
betas <- variables(fit)[grep("b_", variables(fit))]
sd <- variables(fit)[grep("sd_", variables(fit))]
#global patterns in divergence
diverge_beta <- mcmc_parcoord(posterior, np = nuts, pars= betas)
diverge_sd <- mcmc_parcoord(posterior, np = nuts, pars= sd)
#identify collinearity between parameters
collin_beta <- mcmc_pairs(posterior, np = nuts, pars= betas)
collin_sd <- mcmc_pairs(posterior, np = nuts, pars= sd)
#traceplot
trace_beta <- mcmc_trace(posterior, pars = betas, np = nuts)
trace_sd <- mcmc_trace(posterior, pars = sd, np = nuts)
#rhat
rhat <- mcmc_rhat(brms::rhat(fit))
#effective sample size
neff <- mcmc_neff(neff_ratio(fit))
#autocorrelation
autocor_beta <- mcmc_acf(posterior, pars = betas)
autocor_sd <- mcmc_acf(posterior, pars=sd)
#quick glance results
areas <- mcmc_areas(fit, pars=betas)
#combine in list
diagnosis <- list(diverge_beta = diverge_beta,
diverge_sd = diverge_sd,
collin_beta = collin_beta,
collin_sd = collin_sd,
trace_beta = trace_beta,
trace_sd = trace_sd,
rhat = rhat,
neff = neff,
autocor_beta = autocor_beta,
autocor_sd = autocor_sd,
areas = areas)
modelname <- sub(".*/", "", output[i])
modelname <- sub(".RData", "", modelname)
# save output
pdf(file=paste0("output/models/diagnosis/", modelname, ".pdf"))
diverge_beta
diverge_sd
collin_beta
collin_sd
trace_beta
trace_sd
rhat
neff
autocor_beta
autocor_sd
areas
dev.off()
# add to summary
diagnose_summary[[modelname]] <- diagnosis
}
output <- c(output_ams, output_trait, output_total, output_region)
diagnose_summary <- list()
for (i in 1:length(output)){
#load fit
load(file = output[[i]])
#get posteriors
posterior <- as.array(fit)
log_ps <- log_posterior(fit)
nuts <- nuts_params(fit) #divergence
#get only beta and sd
betas <- variables(fit)[grep("b_", variables(fit))]
sd <- variables(fit)[grep("sd_", variables(fit))]
#global patterns in divergence
diverge_beta <- mcmc_parcoord(posterior, np = nuts, pars= betas)
diverge_sd <- mcmc_parcoord(posterior, np = nuts, pars= sd)
#identify collinearity between parameters
collin_beta <- mcmc_pairs(posterior, np = nuts, pars= betas)
collin_sd <- mcmc_pairs(posterior, np = nuts, pars= sd)
#traceplot
trace_beta <- mcmc_trace(posterior, pars = betas, np = nuts)
trace_sd <- mcmc_trace(posterior, pars = sd, np = nuts)
#rhat
rhat <- mcmc_rhat(brms::rhat(fit))
#effective sample size
neff <- mcmc_neff(neff_ratio(fit))
#autocorrelation
autocor_beta <- mcmc_acf(posterior, pars = betas)
autocor_sd <- mcmc_acf(posterior, pars=sd)
#quick glance results
areas <- mcmc_areas(fit, pars=betas)
#combine in list
diagnosis <- list(diverge_beta = diverge_beta,
diverge_sd = diverge_sd,
collin_beta = collin_beta,
collin_sd = collin_sd,
trace_beta = trace_beta,
trace_sd = trace_sd,
rhat = rhat,
neff = neff,
autocor_beta = autocor_beta,
autocor_sd = autocor_sd,
areas = areas)
modelname <- sub(".*/", "", output[i])
modelname <- sub(".RData", "", modelname)
# save output
pdf(file=paste0("output/models/diagnosis/", modelname, ".pdf"))
print(diverge_beta)
print(diverge_sd)
print(collin_beta)
print(collin_sd)
print(trace_beta)
print(trace_sd)
print(rhat)
print(neff)
print(autocor_beta)
print(autocor_sd)
print(areas)
dev.off()
# add to summary
diagnose_summary[[modelname]] <- diagnosis
}
#Look at individual plots like this:
diagnose_summary$attend_froh$rhat
=======
#phenotypes
load("data/phenotypes/phenotypes_long_formodels_withsurv.RData")
#phenotypes
load("data/phenotypes/phenotypes_wide_extra.RData")
## add core
pheno_long_models_ly <- pheno_long_models_ly %>% mutate(core = as.factor(case_when(
!is.na(LMS) ~ "core",
is.na(LMS) ~ "no core"
)))
pacman::p_load(tidyverse)
#phenotypes
load("data/phenotypes/phenotypes_wide_extra.RData")
load("data/phenotypes/phenotypes_long_formodels_withsurv.RData") #from genetic_load_ltet
## add core
pheno_long_models_ly <- pheno_long_models_ly %>% mutate(core = as.factor(case_when(
!is.na(LMS) ~ "core",
is.na(LMS) ~ "no core"
)))
View(pheno_long_models_ly)
wide <- read.csv("data/phenotypes/phenotypes_wide.csv")
View(wide)
## add core
wide <- wide %>% mutate(core = as.factor(case_when(
!is.na(LMS) ~ "core",
is.na(LMS) ~ "no core"
)))
wide$born <- wide$year - wide$age
#phenotypes
load("data/phenotypes/phenotypes_wide_extra.RData")
pheno_long_models_ly$born <- pheno_long_models_ly$year - pheno_long_models_ly$age
View(pheno_long_models_ly)
#phenotypes
load("data/phenotypes/phenotypes_wide_extra.RData")
load("data/phenotypes/phenotypes_long_formodels_withsurv.RData") #from genetic_load_ltet
## add core
pheno <- pheno %>% mutate(core = as.factor(case_when(
!is.na(LMS) ~ "core",
is.na(LMS) ~ "no core"
)))
View(pheno)
source('/vol/cluster-data/rchen/git/ms_load_inbreeding_grouse/script_arrange_repo.R')
pheno_select <- pheno %>% select(c(id:died, sitename:succ.years, leks, LMS))
pheno_select <- pheno %>% select(c(id:died, sitename:succ.years, leks, LMS, LMS_min, core))
#phenotypes
load("../genetic_load_ltet/data/phenotypes/phenotypes_wide_extra.RData")
load("../genetic_load_ltet/data/phenotypes/phenotypes_long_formodels_withsurv.RData") #from genetic_load_ltet
#phenotypes
load("../genetic_load_ltet/data/phenotypes/phenotypes_wide_extra.RData")
load("../genetic_load_ltet/data/phenotypes/phenotypes_long_formodels_withsurv.RData") #from genetic_load_ltet
## add core
pheno <- pheno %>% mutate(core = as.factor(case_when(
!is.na(LMS) ~ "core",
is.na(LMS) ~ "no core"
)))
pheno_select <- pheno %>% select(c(id:died, sitename:succ.years, leks, LMS, LMS_min, core))
View(pheno_select)
write.csv(pheno_select, file = "data/phenotypes/phenotypes_lifetime.csv", quote=F, row.names = F)
save(pheno_select, file = "data/phenotypes/phenotypes_lifetime.RData")
core <- subst(pheno_select, core == "core")
core <- subset(pheno_select, core == "core")
#long
pheno_long_models_ly$born <- pheno_long_models_ly$year - pheno_long_models_ly$age
rm(core)
pheno_long_models_ly <- left_join(pheno_long_models_ly, pheno[,c("id", "core")], by = "id")
View(pheno_long_models_ly)
names(pheno_long_models_ly)
pheno_wide <- pheno %>% select(c(id:died, sitename:succ.years, leks, LMS, LMS_min, core))
write.csv(pheno_wide, file = "data/phenotypes/phenotypes_lifetime.csv", quote=F, row.names = F)
save(pheno_wide, file = "data/phenotypes/phenotypes_lifetime.RData")
load("../genetic_load_ltet/data/phenotypes/phenotypes_long_formodels_withsurv.RData") #from genetic_load_ltet
#long
pheno_long_models_ly$born <- pheno_long_models_ly$year - pheno_long_models_ly$age
pheno_long_models_ly <- left_join(pheno_long_models_ly, pheno[,c("id", "core")], by = "id")
names(pheno_long_models_ly)
pheno_long <- pheno_long_models_ly %>% select(c(id:MS, core, born))
View(pheno_long)
pheno_long <- pheno_long_models_ly %>% select(c(id:age, lyre:MS, core, born))
names(pheno_long)
pheno_long <- pheno_long_models_ly %>% select(c(id, year, born, age, core, site, lifespan,lyre:MS))
write.csv(pheno_long, file = "data/phenotypes/phenotypes_annual.csv", quote=F, row.names = F)
save(pheno_long, file = "data/phenotypes/phenotypes_annual.RData")
## Methods
tinytex::uninstall_tinytex()
