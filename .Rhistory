=======
allele_freq_low_long_derived$Deleteriousness <- "Low impact"
names(allele_freq_gerp_long_derived)[7] <- "allele_freq"
names(allele_freq_high_long_derived)[7] <- "allele_freq"
names(allele_freq_gerp0_long_derived)[7] <- "allele_freq"
names(allele_freq_low_long_derived)[7] <- "allele_freq"
names(allele_freq_high_long_derived)[6] <- names(allele_freq_gerp_long_derived)[6]
names(allele_freq_low_long_derived)[6] <- names(allele_freq_gerp_long_derived)[6]
allelefreq <- rbind(allele_freq_gerp_long_derived, allele_freq_high_long_derived,
allele_freq_gerp0_long_derived, allele_freq_low_long_derived)
ggplot(subset(allelefreq, Method == "GERP"), aes(x = frequency, fill = Deleteriousness, col = Deleteriousness)) +
# scale_y_continuous(breaks=(c(50000, 100000, 150000)),
#                    labels=c("50 k", "100 k", "150 k"))+
geom_histogram(aes(y=after_stat(c(count[group==1]/sum(count[group==1]),
count[group==2]/sum(count[group==2]))*100)),
binwidth=0.07, position="dodge") +
scale_color_manual(values = c("grey", clr_gerp)) +
scale_fill_manual(values = alpha(c("grey", clr_gerp), 0.7))+
labs(x = "Allele frequency", y = "Percentage of SNPs", title = "GERP") +
theme(legend.position = c(0.8,0.9))-> fig_af_gerp
fig_af_gerp
png(file = "plots/main/fig_2d.png", width=600, height=600)
fig_af_gerp
=======
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0))) -> posterior_highregions
posterior_highregions
png(file = "plots/main/fig_2d.png", width=600, height=800)
posterior_highregions
dev.off()
# merge
load_froh <- left_join(load, froh, by = "id")
# make long
load_froh_long <- gather(load_froh, zygosity, load, het_load:total_load, factor_key=T)
load_froh_long$zygosity <- gsub("hom_load", "Hom", load_froh_long$zygosity)
load_froh_long$zygosity <- gsub("het_load", "Het", load_froh_long$zygosity)
load_froh_long$zygosity <- gsub("total_load", "Total", load_froh_long$zygosity)
load_froh_long$zygosity  <- factor(load_froh_long$zygosity, levels=c("Total", "Hom", "Het"))
ggplot(load_froh_long, aes(x = froh, y = load, col = zygosity, fill = zygosity)) +
geom_point(size=2, shape=21) + geom_smooth(method='lm', fill = clr_grey, show.legend = F)+
facet_wrap(~loadtype, scales="free") +
theme(strip.background = element_blank())+
labs(x = expression(italic(F)[ROH]), y= "Load", col = "Load type") +
scale_fill_manual(values = alpha(c(clrs_hunting[1:3]), 0.6)) +
guides(fill = "none")+
scale_color_manual(values = c(clrs_hunting[1:3]))  -> froh_load
froh_load
png(file = "plots/sup/extended_data_1c.png", width=800, height=600)
froh_load
dev.off()
### Combine in one figure ####
cowplot::plot_grid(hist_loads_gerp, hist_loads_high, froh_load,
ncol = 1, labels = c("a", "b", "c"), label_fontface = "plain", label_size = 22,
rel_heights = c(0.8, 0.8, 1),
align = "hv", axis = "lb") -> fig_loads
png(file = "plots/sup/extended_data_1.png", width=1000, height=1000)
fig_loads
dev.off()
extrafont::loadfonts(device="all")
pacman::p_load(tidyverse, data.table, cowplot, extrafont, ggtext, VennDiagram, ggvenn, gridExtra)
source("scripts/theme_ggplot.R")
### Load data ####
# load mutation load measures
load("output/load/all_loads_combined_da_nosex_29scaf_plus_per_region.RData") #loads no sex chr only 30 scaf
# subset only the relevant method/loadtype
load <- load_per_region %>% filter(loadtype == "gerp45"|loadtype=="high")
# rename
load$loadtype <- gsub("gerp45", "GERP ≥ 4", load$loadtype)
load$loadtype <- gsub("high", "High impact SnpEff", load$loadtype)
# load inbreeding
load("output/inbreeding/froh.RData")
#### Fig 3a and b - distribution of loads  ####
long_load <- gather(load, zygosity, load, total_load:het_load, factor_key=T)
long_load$zygosity <- gsub("total_load", "Total", long_load$zygosity)
long_load$zygosity <- gsub("hom_load", "Hom", long_load$zygosity)
long_load$zygosity <- gsub("het_load", "Het", long_load$zygosity)
long_load$zygosity  <- factor(long_load$zygosity, levels=c("Total", "Hom", "Het"))
ggplot(subset(long_load, loadtype == "GERP ≥ 4"), aes(x = load, fill = zygosity, col = zygosity)) +
geom_histogram(position="identity", alpha=0.8, bins = 40) +
facet_wrap( ~zygosity, scales="free")+
scale_fill_manual(values = alpha(c(clrs_hunting[1:3]), 0.8)) +
scale_color_manual(values = c(clrs_hunting[1:3])) +
theme(strip.background = element_blank())+
guides(col = "none")+
labs(x = "Load", y = "Count", fill = "Load type", title = "GERP ≥ 4") -> hist_loads_gerp
hist_loads_gerp
png(file = "plots/sup/extended_data_1a.png", width=800, height=600)
hist_loads_gerp
dev.off()
ggplot(subset(long_load, loadtype == "High impact SnpEff"), aes(x = load, fill = zygosity, col = zygosity)) +
geom_histogram(position="identity", alpha=0.8, bins = 40) +
facet_wrap(~zygosity, scales="free")+
scale_fill_manual(values = alpha(c(clrs_hunting[1:3]), 0.8)) +
scale_color_manual(values = c(clrs_hunting[1:3])) +
guides(col = "none")+
theme(strip.background = element_blank())+
labs(x = "Load", y = "Count", fill = "Load type", title = "High impact SnpEff") -> hist_loads_high
hist_loads_high
png(file = "plots/sup/extended_data_1b.png", width=800, height=600)
hist_loads_high
dev.off()
### Fig 3c - relationship between inbreeding and loads ####
# merge
load_froh <- left_join(load, froh, by = "id")
# make long
load_froh_long <- gather(load_froh, zygosity, load, het_load:total_load, factor_key=T)
load_froh_long$zygosity <- gsub("hom_load", "Hom", load_froh_long$zygosity)
load_froh_long$zygosity <- gsub("het_load", "Het", load_froh_long$zygosity)
load_froh_long$zygosity <- gsub("total_load", "Total", load_froh_long$zygosity)
load_froh_long$zygosity  <- factor(load_froh_long$zygosity, levels=c("Total", "Hom", "Het"))
ggplot(load_froh_long, aes(x = froh, y = load, col = zygosity, fill = zygosity)) +
geom_point(size=2, shape=21) + geom_smooth(method='lm', fill = clr_grey, show.legend = F)+
facet_wrap(~loadtype, scales="free") +
theme(strip.background = element_blank())+
labs(x = expression(italic(F)[ROH]), y= "Load", col = "Load type") +
scale_fill_manual(values = alpha(c(clrs_hunting[1:3]), 0.6)) +
guides(fill = "none")+
scale_color_manual(values = c(clrs_hunting[1:3]))  -> froh_load
froh_load
png(file = "plots/sup/extended_data_1c.png", width=800, height=600)
froh_load
dev.off()
### Combine in one figure ####
cowplot::plot_grid(hist_loads_gerp, hist_loads_high, froh_load,
ncol = 1, labels = c("a", "b", "c"), label_fontface = "plain", label_size = 22,
rel_heights = c(0.8, 0.8, 1),
align = "hv", axis = "lb") -> fig_loads
png(file = "plots/sup/extended_data_1.png", width=1000, height=1000)
fig_loads
dev.off()
### Cor tests ####
cor.test(load_froh_long$froh[which(load_froh_long$loadtype == "GERP ≥ 4" & load_froh_long$zygosity == "Hom")])
### Cor tests ####
cor.test(load_froh_long$froh[which(load_froh_long$loadtype == "GERP ≥ 4" & load_froh_long$zygosity == "Hom")],
load_froh_long$load[which(load_froh_long$loadtype == "GERP ≥ 4" & load_froh_long$zygosity == "Hom")])
cor.test(load_froh_long$froh[which(load_froh_long$loadtype == "High impact SnpEff" & load_froh_long$zygosity == "Hom")],
load_froh_long$load[which(load_froh_long$loadtype == "High impact SnpEff" & load_froh_long$zygosity == "Hom")])
# het and froh
cor.test(load_froh_long$froh[which(load_froh_long$loadtype == "GERP ≥ 4" & load_froh_long$zygosity == "Het")],
load_froh_long$load[which(load_froh_long$loadtype == "GERP ≥ 4" & load_froh_long$zygosity == "Het")])
cor.test(load_froh_long$froh[which(load_froh_long$loadtype == "High impact SnpEff" & load_froh_long$zygosity == "Het")],
load_froh_long$load[which(load_froh_long$loadtype == "High impact SnpEff" & load_froh_long$zygosity == "Het")])
# total and froh
cor.test(load_froh_long$froh[which(load_froh_long$loadtype == "GERP ≥ 4" & load_froh_long$zygosity == "Total")],
load_froh_long$load[which(load_froh_long$loadtype == "GERP ≥ 4" & load_froh_long$zygosity == "Total")])
cor.test(load_froh_long$froh[which(load_froh_long$loadtype == "High impact SnpEff" & load_froh_long$zygosity == "Total")],
load_froh_long$load[which(load_froh_long$loadtype == "High impact SnpEff" & load_froh_long$zygosity == "Total")])
#load model
load(file = "output/models/from_lms.RData")
brm_froh <- fit
mcmc_intervals_data(brm_froh)
### load packages ####
pacman::p_load(brms, bayesplot, tidyverse, ggridges, prismatic, ggpubr, extrafont, cowplot, performance, data.table, effects, scales)
mcmc_intervals_data(brm_froh)
mcmc_intervals_data(brm_froh)
mcmc_intervals_data(brm_froh, prob=0.8, prob.outer=0.95)
mcmc_intervals_data(brm_froh, prob=0.8, prob_outer = 0.95)
r2_bayes(brm_froh_lms)
# froh
load(file = "output/models/from_lms.RData")
brm_froh_lms <- fit
r2_bayes(brm_froh_lms)
bayes_R2(brm_froh_lms)
### Packages ####
pacman::p_load(tidyverse, brms, bayesplot, data.table, ggridges)
# theme
>>>>>>> c6d299b4db7725bf3f941d6f93ae8cc4b9d11df5
source("scripts/theme_ggplot.R")
#### Approach 1: combining GERP and high mutations in one total load parameter ####
# combined
load(file = "output/models/total_hom_het/lms_total_gerp45_plus_high.RData")
brm_load_gerp_high <- brm_load_t
mcmc_intervals_data(brm_load_gerp_high)
mcmc_intervals_data(brm_load_gerp_high, prob = 0.8, prob_outer = 0.95)
#### Approach 2: both loads in the same model ####
load(file = "output/models/total_hom_het/lms_total_gerp45_high_sep.RData")
brm_load_gerp_high_sep <- brm_load_t
mcmc_intervals_data(brm_load_gerp_high_sep, prob = 0.8, prob_outer = 0.95)
# load packages
pacman::p_load(tidyverse, brms, bayesplot, data.table, ggridges)
source("scripts/theme_ggplot.R")
##### plot ####
load(file = "output/models/total_hom_het/lms_total_binary_high.RData")
load(file = "output/models/total_hom_het/lms_total_binary_gerp45.RData")
# get intervals
brm_load_binary_high_interval <- mcmc_intervals_data(brm_load_binary_high, prob =0.8, prob_outer = 0.95, pars = "b_scaletotal_load_high")
brm_load_binary_gerp45_interval <- mcmc_intervals_data(brm_load_binary_gerp45, prob =0.8, prob_outer = 0.95, pars = "b_scaletotal_load_gerp45")
brms_plota_interval <- rbind(brm_load_binary_gerp45_interval, brm_load_binary_high_interval)
brms_plota_interval$model <- c("Total GERP load", "Total SnpEff load")
# get areas
brm_load_binary_gerp45_area <- mcmc_areas_data(brm_load_binary_gerp45, pars = "b_scaletotal_load_gerp45")
brm_load_binary_high_area <- mcmc_areas_data(brm_load_binary_high, pars = "b_scaletotal_load_high")
brms_plota_areas <- rbind(brm_load_binary_gerp45_area,
brm_load_binary_high_area)
brms_plota_areas$model <- c( rep("Total GERP load", nrow(brm_load_binary_gerp45_area)),
rep("Total SnpEff load", nrow(brm_load_binary_high_area)))
#rearrange order for visualization
brms_plota_interval$model  <- factor(as.factor(brms_plota_interval$model),
levels= c("Total SnpEff load", "Total GERP load"))
brms_plota_areas$model  <- factor(as.factor(brms_plota_areas$model),
levels= c("Total SnpEff load", "Total GERP load"))
# split by interval
brms_plota <- split(brms_plota_areas, brms_plota_areas$interval)
brms_plota$bottom <- brms_plota$outer %>%
summarise(
ll = min(.data$x),
hh = max(.data$x),
.groups = "drop_last"
) %>%
ungroup()
ggplot(data = brms_plota$outer) +
aes(x = .data$x, y = .data$model) +
geom_ridgeline(aes(scale = 0.4, height = scaled_density, fill = model, col = model))+
geom_segment(data=brms_plota_interval, aes(x = l, xend = h, yend = model), col = "black", linewidth=3)+
geom_segment(data=brms_plota_interval, aes(x = ll, xend = hh, yend = model), col = "black")+
geom_point(data=brms_plota_interval, aes(x = m, y = model), fill="white",  col = "black", shape=21, size = 6) +
geom_vline(xintercept = 0, col = "#ca562c", linetype="longdash")+
labs(x = expression("Standardised"~beta), y = "Parameter")+
xlim(-0.35, 0.1)+
scale_fill_manual(values =alpha(c(clr_high, clr_gerp, clr_froh), 0.7)) +
scale_y_discrete(labels = c("Total SnpEff load", "Total GERP load",
expression(italic(F)[ROH])))+
scale_color_manual(values =c(clr_high, clr_gerp, clr_froh)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
legend.position = "none",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)))
ggplot(data = brms_plota$outer) +
aes(x = .data$x, y = .data$model) +
geom_ridgeline(aes(scale = 0.4, height = scaled_density, fill = model, col = model))+
geom_segment(data=brms_plota_interval, aes(x = l, xend = h, yend = model), col = "black", linewidth=3)+
geom_segment(data=brms_plota_interval, aes(x = ll, xend = hh, yend = model), col = "black")+
geom_point(data=brms_plota_interval, aes(x = m, y = model), fill="white",  col = "black", shape=21, size = 6) +
geom_vline(xintercept = 0, col = "#ca562c", linetype="longdash")+
labs(x = expression("Standardised"~beta), y = "Parameter")+
scale_fill_manual(values =alpha(c(clr_high, clr_gerp, clr_froh), 0.7)) +
scale_y_discrete(labels = c("Total SnpEff load", "Total GERP load",
expression(italic(F)[ROH])))+
scale_color_manual(values =c(clr_high, clr_gerp, clr_froh)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
legend.position = "none",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)))
ggplot(data = brms_plota$outer) +
aes(x = .data$x, y = .data$model) +
geom_ridgeline(aes(scale = 0.4, height = scaled_density, fill = model, col = model))+
geom_segment(data=brms_plota_interval, aes(x = l, xend = h, yend = model), col = "black", linewidth=3)+
geom_segment(data=brms_plota_interval, aes(x = ll, xend = hh, yend = model), col = "black")+
geom_point(data=brms_plota_interval, aes(x = m, y = model), fill="white",  col = "black", shape=21, size = 6) +
geom_vline(xintercept = 0, col = "#ca562c", linetype="longdash")+
labs(x = expression("Standardised"~beta), y = "Parameter")+
scale_fill_manual(values =alpha(c(clr_high, clr_gerp, clr_froh), 0.7)) +
scale_y_discrete(labels = c("Total SnpEff load", "Total GERP load",
expression(italic(F)[ROH])))+
scale_color_manual(values =c(clr_high, clr_gerp, clr_froh)) +
theme(panel.border = element_blank(),
panel.grid = element_blank(),
strip.background = element_blank(),
legend.position = "none",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0))) -> loads_lms_binary
#### plot ####
load(file = "output/models/total_hom_het/lms_total_cat_high.RData")
summary(brm_load_cat_high)
# get intervals
brm_load_cat_high_interval <- mcmc_intervals_data(brm_load_cat_high, prob =0.8, prob_outer = 0.95, pars = "muModerate_scaletotal_load_high")
mcmc_intervals_data(brm_load_cat_high, prob =0.8, prob_outer = 0.95)
# get intervals
brm_load_cat_high_interval <- mcmc_intervals_data(brm_load_cat_high, prob =0.8, prob_outer = 0.95, pars = grepl("scaletotal_load_high", parameter))
# get intervals
brm_load_cat_high_interval <- mcmc_intervals_data(brm_load_cat_high, prob =0.8, prob_outer = 0.95)
brm_load_cat_high_interval<- subset(brm_load_cat_high_interval, pars = grepl("scaletotal_load_high", parameter))
brm_load_cat_high_interval<- subset(brm_load_cat_high_interval, paramter = grepl("scaletotal_load_high", parameter))
brm_load_cat_high_interval<- subset(brm_load_cat_high_interval, parameter = grepl("scaletotal_load_high", parameter))
brm_load_cat_high_interval<- subset(brm_load_cat_high_interval, grepl("scaletotal_load_high", parameter))
brm_load_cat_high_interval
# get intervals
brm_load_cat_high_interval <- mcmc_intervals_data(brm_load_cat_high, prob =0.8, prob_outer = 0.95)
brm_load_cat_high_interval<- subset(brm_load_cat_high_interval, grepl("scaletotal_load_high", parameter))
# get areas
brm_load_cat_gerp45_area <- mcmc_areas_data(brm_load_cat_gerp45)
brm_load_cat_high_area <- mcmc_areas_data(brm_load_cat_high)
brm_load_cat_high_area<- subset(brm_load_cat_high_area, grepl("scaletotal_load_high", parameter))
brm_load_cat_high_interval
extrafont::loadfonts(device="all")
pacman::p_load(tidyverse, data.table, cowplot, extrafont, ggtext, VennDiagram, ggvenn, gridExtra, patchwork)
source("scripts/theme_ggplot.R")
gerp_snp_scafs <- list.files(path = "output/gerp/beds", pattern = "gerp_overlapSNP*", full.names = T)
gerp_snp_scafs <- gerp_snp_scafs[-22] #empty
gerp_snp <- data.frame()
for (i in 1:length(gerp_snp_scafs)){
scaf <- read.table(gerp_snp_scafs[i])
gerp_snp <- rbind(gerp_snp, scaf)
}
head(gerp_snp)
## metadata on filenames and ids
filenames <- fread("data/genomic/raw/metadata/idnames.fam")
ids <- fread("data/genomic/raw/metadata/file_list_all_bgi_clean.csv")
#merge
idnames <- left_join(filenames[,c("V1")], ids[,c("loc", "id")], by = c("V1" = "loc"))
names(gerp_snp) <- c("chr", "start", "pos", "neutral_rate_n", "rs_score", "ancestral", "derived", "qual", "info","format", idnames$id) #rename columns
### separate in groups of snpeff
high <- subset(gerp_snp, grepl("HIGH", gerp_snp$info) & !grepl("WARNING", gerp_snp$info))
mod <- subset(gerp_snp, grepl("MODERATE", gerp_snp$info) & !grepl("WARNING", gerp_snp$info))
low <- subset(gerp_snp, grepl("LOW", gerp_snp$info) & !grepl("WARNING", gerp_snp$info))
modify <- subset(gerp_snp, grepl("MODIFIER", gerp_snp$info) & !grepl("WARNING", gerp_snp$info))
## violin plot
high$impact <- "High"
mod$impact <- "Moderate"
low$impact <- "Low"
modify$impact <- "Modify"
snpeff <- rbind(high, mod, low, modify)
snpeff$impact <- factor(snpeff$impact, levels = c("Modify", "Low", "Moderate", "High"))
sum_gerp_per_snpeff <- data.frame(impact = c("High", "Moderate", "Low", "Modify"),
mean = c(mean(high$rs_score), mean(mod$rs_score), mean(low$rs_score), mean(modify$rs_score)),
median = c(median(high$rs_score), median(mod$rs_score), median(low$rs_score), median(modify$rs_score)),
quant_25 = c(as.vector(quantile(high$rs_score, probs = 0.25)),
as.vector(quantile(mod$rs_score, probs = 0.25)),
as.vector(quantile(low$rs_score, probs = 0.25)),
as.vector(quantile(modify$rs_score, probs = 0.25))),
quant_75 = c(as.vector(quantile(high$rs_score, probs = 0.75)),
as.vector(quantile(mod$rs_score, probs = 0.75)),
as.vector(quantile(low$rs_score, probs = 0.75)),
as.vector(quantile(modify$rs_score, probs = 0.75))))
test <- snpeff %>% sample_n(1000)
ggplot(snpeff, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_violin(fill = "grey") +
geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
col = "black", linewidth=0.5)+
geom_point(data = sum_gerp_per_snpeff, aes(x = mean, y = impact), size = 3)+
labs(x = "GERP score", y = "Impact category") -> violin_gerp
violin_gerp
ggsave(violin_gerp, file = "plots/sup/violin_gerp_per_snpeff.png", width=10, height=12)
sum_gerp_per_snpeff
ggplot(test, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_violin(fill = "grey") +
geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
col = "black", linewidth=0.5)+
geom_point(data = sum_gerp_per_snpeff, aes(x = median, y = impact), size = 3)+
labs(x = "GERP score", y = "Impact category") -> violin_gerp
violin_gerp
rmgerp_snp
ggplot(test, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_boxplot()+
geom_violin(fill = "grey") +
# geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
#               col = "black", linewidth=0.5)+
geom_point(data = sum_gerp_per_snpeff, aes(x = median, y = impact), size = 3)+
labs(x = "GERP score", y = "Impact category") -> violin_gerp
violin_gerp
rm(low)
rm(modify)
rm(scaf)
rm(mod)
rm(gerp_snp)
ggplot(test, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_violin(fill = "grey") +
# geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
#               col = "black", linewidth=0.5)+
#geom_point(data = sum_gerp_per_snpeff, aes(x = median, y = impact), size = 3)+
geom_boxplot()+
labs(x = "GERP score", y = "Impact category") -> violin_gerp
violin_gerp
ggplot(test, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_violin(fill = "grey") +
# geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
#               col = "black", linewidth=0.5)+
geom_point(data = sum_gerp_per_snpeff, aes(x = median, y = impact), size = 3)+
labs(x = "GERP score", y = "Impact category") -> violin_gerp
violin_gerp
ggplot(test, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_violin(fill = "grey") +
geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
col = "black", linewidth=0.3)+
geom_point(data = sum_gerp_per_snpeff, aes(x = median, y = impact), size = 3)+
labs(x = "GERP score", y = "Impact category") -> violin_gerp
violin_gerp
ggplot(snpeff, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_violin(fill = "grey") +
geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
col = "black", linewidth=0.3)+
geom_point(data = sum_gerp_per_snpeff, aes(x = median, y = impact), size = 3)+
labs(x = "GERP score", y = "Impact category") -> violin_gerp
ggsave(violin_gerp, file = "plots/sup/violin_gerp_per_snpeff.png", width=10, height=12)
ggplot(snpeff, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_violin(fill = "grey") +
#  geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
#               col = "black", linewidth=0.3)+
geom_point(data = sum_gerp_per_snpeff, aes(x = median, y = impact), size = 3)+
labs(x = "GERP score", y = "Impact category") -> violin_gerp
violin_gerp
ggsave(violin_gerp, file = "plots/sup/violin_gerp_per_snpeff.png", width=10, height=12)
#load all gerp scores
gerp_snp_scafs <- list.files(path = "output/gerp/beds", pattern = "gerp_overlapSNP*", full.names = T)
gerp_snp_scafs <- gerp_snp_scafs[-22] #empty
gerp_snp <- data.frame()
for (i in 1:length(gerp_snp_scafs)){
scaf <- read.table(gerp_snp_scafs[i])
gerp_snp <- rbind(gerp_snp, scaf)
}
head(gerp_snp)
## metadata on filenames and ids
filenames <- fread("data/genomic/raw/metadata/idnames.fam")
library(data.table)
pacman::p_load(tidyverse, data.table, cowplot, extrafont, ggtext, VennDiagram, ggvenn, gridExtra, patchwork)
## metadata on filenames and ids
filenames <- fread("data/genomic/raw/metadata/idnames.fam")
ids <- fread("data/genomic/raw/metadata/file_list_all_bgi_clean.csv")
#merge
idnames <- left_join(filenames[,c("V1")], ids[,c("loc", "id")], by = c("V1" = "loc"))
names(gerp_snp) <- c("chr", "start", "pos", "neutral_rate_n", "rs_score", "ancestral", "derived", "qual", "info","format", idnames$id) #rename columns
# separate in groups of snpeff
high <- subset(gerp_snp, grepl("HIGH", gerp_snp$info) & !grepl("WARNING", gerp_snp$info))
mod <- subset(gerp_snp, grepl("MODERATE", gerp_snp$info) & !grepl("WARNING", gerp_snp$info))
low <- subset(gerp_snp, grepl("LOW", gerp_snp$info) & !grepl("WARNING", gerp_snp$info))
modify <- subset(gerp_snp, grepl("MODIFIER", gerp_snp$info) & !grepl("WARNING", gerp_snp$info))
## violin plot
high$impact <- "High"
mod$impact <- "Moderate"
low$impact <- "Low"
modify$impact <- "Modify"
snpeff <- rbind(high, mod, low, modify)
snpeff$impact <- factor(snpeff$impact, levels = c("Modify", "Low", "Moderate", "High"))
sum_gerp_per_snpeff <- data.frame(impact = c("High", "Moderate", "Low", "Modify"),
mean = c(mean(high$rs_score), mean(mod$rs_score), mean(low$rs_score), mean(modify$rs_score)),
median = c(median(high$rs_score), median(mod$rs_score), median(low$rs_score), median(modify$rs_score)),
quant_25 = c(as.vector(quantile(high$rs_score, probs = 0.25)),
as.vector(quantile(mod$rs_score, probs = 0.25)),
as.vector(quantile(low$rs_score, probs = 0.25)),
as.vector(quantile(modify$rs_score, probs = 0.25))),
quant_75 = c(as.vector(quantile(high$rs_score, probs = 0.75)),
as.vector(quantile(mod$rs_score, probs = 0.75)),
as.vector(quantile(low$rs_score, probs = 0.75)),
as.vector(quantile(modify$rs_score, probs = 0.75))))
ggplot(snpeff, aes(x = rs_score, y = impact)) +
geom_vline(xintercept = 0, col = "darkred", linetype = "dotted") +
geom_violin(fill = "grey") +
#  geom_segment(data = sum_gerp_per_snpeff, aes(x = quant_25, xend = quant_75, yend = impact),
#               col = "black", linewidth=0.3)+
geom_point(data = sum_gerp_per_snpeff, aes(x = median, y = impact), size = 3)+
labs(x = "GERP score", y = "SnpEff impact category") -> violin_gerp
violin_gerp
ggsave(violin_gerp, file = "plots/sup/violin_gerp_per_snpeff.png", width=10, height=12)
extrafont::loadfonts(device="all")
load(file = "data/phenotypes/phenotypes_annual.RData")
# load mutation load measures
load("output/load/all_loads_combined_da_nosex_29scaf_plus_per_region.RData") #loads no sex chr only 30 scaf
View(load_per_region)
pacman::p_load(bayesplot, brms, dplyr, data.table)
# load pheno data lifetime
load(file = "output/load/pheno_loads_lifetime.RData")
# load mutation load measures
load("output/load/all_loads_combined_da_nosex_29scaf_plus_per_region.RData") #loads no sex chr only 30 scaf
method="gerp45"
load <- load_per_region %>% filter(loadtype == method)
# combine
pheno_wide_load <- left_join(pheno_wide, load, by = "id")
pheno_wide_load <- subset(pheno_wide_load, !is.na(total_load)) #some ids without genotypes, excluded for wgr
summary(glmmTMB::glmmTMB(LMS_min~ scale(total_load) + core + (1|site), data = pheno_wide_load,family='poisson', ziformula = ~1))
### load packages ###
pacman::p_load(dplyr, data.table)
### load function to calculate load ###
source("scripts/7_calculate_load/function_calculate_load.R")
gerp_scafs <- list.files(path = "output/gerp", pattern = "count_mutations*", full.names = T)
gerp_raw <- data.frame()
for (i in 1:length(gerp_scafs)){
scaf <- fread(gerp_scafs[i])
gerp_raw <- rbind(gerp_raw, scaf)
}
gerp <- gerp_raw %>% select(-c(scafno)) %>% group_by(id, gerp_cat) %>%
summarise(across(n_total:hom_data, sum))
gerp <- gerp %>% mutate(het_load = het_data / n_genotyped,
hom_load = hom_data / n_genotyped,
total_load = (het_data * 0.5 + hom_data) / n_genotyped)
gerp_45_load <- subset(gerp, gerp_cat == "4-5")
View(gerp_45_load)
summary(gerp_45_load$n_genotyped)
gerp_45_load <- gerp_45_load % mutate(tot_allele = hom_data*2+het_data)
gerp_45_load <- gerp_45_load %>% mutate(tot_allele = hom_data*2+het_data)
summary(gerp_45_load$tot_allele)
load(file = "output/load/snpeff/snpeff_high.RData")
snpeff <- snpeff %>% mutate(tot_allele = hom_data*2+het_data)
head(snpeff)
names(snpeff)
high <- read.table("data/genomic/intermediate/snpef/ltet_ann_aa_snp_output_HIGH.vcf.gz")
high_load <- calculate_load_snpeff(high, output_vcf = TRUE, loadtype = "high")
high_load <- high_load$load
snpeff <- high_load
snpeff <- snpeff %>% mutate(tot_allele = hom_data*2+het_data)
names(snpeff)
View(snpeff)
snpeff <- snpeff %>% mutate(tot_allele = hom_load*n_genotyped*2 + het_load*n_genotyped)
summary(snpeff$tot_allele)
# for future: also read in all gerp >= 4 for subsetting etc
gerp_snp_scafs <- list.files(path = "output/gerp/beds", pattern = "gerp_overlapSNP*", full.names = T)
gerp_snp_scafs <- gerp_snp_scafs[-22] #empty
gerp_snp <- data.frame()
for (i in 1:length(gerp_snp_scafs)){
scaf <- read.table(gerp_snp_scafs[i])
scaf <- scaf %>% filter(V5 >= 4)
gerp_snp <- rbind(gerp_snp, scaf)
}
head(gerp_snp)
# randomly subset 20 individuals for review
random_ids <- sample(20)
random_ids
names(gerp_snp)[1:10]
# randomly subset 20 individuals for review
random_ids <- sample(11:200, 20)
random_ids
# randomly subset 20 individuals for review
set.seed(1980)
random_ids <- sample(11:200, 20)
random_ids
random_ids <- sample(11:200, 20)
random_ids
head(gerp_snp)[1:1]
head(gerp_snp)[1:11]
sub_gerp <- gerp_snp[c(1:10,random_ids)]
# only select variant sites
gt <- c(11:ncol(sub_gerp))
select_n3 <- function(x){x = substr(x,1,3)}
sub_gerp[gt] <- lapply(sub_gerp[gt], select_n3)
head(sub_gerp)
sub_gerp[c(11:ncol(sub_gerp))] <- lapply(sub_gerp[c(11:ncol(sub_gerp))] , gsub, pattern = "0/0", replacement = "0")
head(sub_gerp)
sub_gerp[c(11:ncol(sub_gerp))] <- lapply(sub_gerp[c(11:ncol(sub_gerp))] , gsub, pattern = "0/1", replacement = "1")
sub_gerp[c(11:ncol(sub_gerp))] <- lapply(sub_gerp[c(11:ncol(sub_gerp))] , gsub, pattern = "1/0", replacement = "1")
sub_gerp[c(11:ncol(sub_gerp))] <- lapply(sub_gerp[c(11:ncol(sub_gerp))] , gsub, pattern = "1/1", replacement = "2")
head(sub_gerp)
sub_gerp[c(11:ncol(sub_gerp))] <- lapply(sub_gerp[c(11:ncol(sub_gerp))] , gsub, pattern = "./.", replacement = NA)
sub_gerp[c(11:ncol(sub_gerp))] <- lapply(sub_gerp[c(11:ncol(sub_gerp))], as.numeric)
head(sub_gerp)
# sum by row
sub_gerp$n_allele <- rowSums(n_allele[,c(11:ncol(sub_gerp))],na.rm=T))
# sum by row
sub_gerp$n_allele <- rowSums(n_allele[,c(11:ncol(sub_gerp))],na.rm=T)
# sum by row
sub_gerp$n_allele <- rowSums(sub_gerp[,c(11:ncol(sub_gerp))],na.rm=T)
head(sub_gerp)
nrow(sub_gerp)
nrow(subset(sub_gerp, n_allele > 0))
270255/413558*100
100-270255/413558*100
load(file = "output/pop_gen/relatedness_all.RData")
load(file = "output/load/pheno_loads_lifetime.RData")
load("output/load/all_loads_combined_da_nosex_29scaf_plus_per_region.RData") #loads no sex chr only 30 scaf
method="gerp45"
load <- load_per_region %>% filter(loadtype == method)
# changes names
## metadata on filenames and ids
filenames <- fread("data/genomic/raw/metadata/idnames.fam")
ids <- fread("data/genomic/raw/metadata/file_list_all_bgi_clean.csv")
#merge
idnames <- left_join(filenames[,c("V1")], ids[,c("loc", "id")], by = c("V1" = "loc"))
gen <- left_join(gen, idnames, by = c("FID1" = "V1"))
gen <- left_join(gen, idnames, by = c("FID2" = "V1"))
#take only related
related <- subset(gen, criteria != "Unrelated")
ids_related <- data.frame(id = c(related$id.x, related$id.y)) %>% unique()
# add lms
gen <- left_join(gen, pheno_wide[,c("id", "LMS_min", "born")], by = c("id.x" = "id"))
gen <- left_join(gen, pheno_wide[,c("id", "LMS_min", "born")], by = c("id.y" = "id"))
names(gen)
gen <- gen %>% mutate(LMS_dif_abs = abs(LMS_min.x - LMS_min.y))
gen$criteria <- factor(gen$criteria, levels = c("Unrelated", "Full-sibling", "Parent-offspring", "Second-degree", "Third-degree", "Unknown"))
summary(glm(LMS_dif_abs ~ criteria, data = gen))
parent_off <-  subset(gen, criteria == "Parent-offspring")
#choose parent
parent_off <- parent_off %>% mutate(id_parent = case_when(
born.x > born.y ~ id.x,
born.y > born.x ~ id.y
))
`%!in%` = Negate(`%in%`)
summary(glmmTMB::glmmTMB(LMS_min ~ scale(total_load) + core + (1|site), data = subset(data, id %!in% parent_off$id_parent & loadtype == "gerp45"),
family = "poisson", ziformula = ~1))
names(data)
data <-  left_join(pheno_wide, load_per_region, by = "id")
names(data)
summary(glmmTMB::glmmTMB(LMS_min ~ scale(total_load) + core + (1|site), data = subset(data, id %!in% parent_off$id_parent & loadtype == "gerp45"),
family = "poisson", ziformula = ~1))
summary(glmmTMB::glmmTMB(LMS_min ~ scale(total_load) + core + (1|site), data = subset(data, id %!in% parent_off$id_parent & loadtype == "high"),
family = "poisson", ziformula = ~1))
summary(as.factor(data$loadtype))
summary(glmmTMB::glmmTMB(LMS_min ~ scale(total_load) + core + (1|site), data = subset(data, id %!in% parent_off$id_parent & loadtype == "gerp45_promoter"),
family = "poisson", ziformula = ~1))
summary(glmmTMB::glmmTMB(LMS_min ~ scale(total_load) + core + (1|site), data = subset(data, id %!in% parent_off$id_parent & loadtype == "high_promoter"),
family = "poisson", ziformula = ~1))
summary(glmmTMB::glmmTMB(LMS_min ~ scale(total_load) + core + (1|site), data = subset(data, id %!in% parent_off$id_parent & loadtype == "high"),
family = "poisson", ziformula = ~1))
names(gen)
load
gen <- left_join(gen, load[,c("id", "total_load")], by = c("id.y" = "id"))
names(gen)
load(file = "output/pop_gen/relatedness_all.RData")
gen <- left_join(gen, idnames, by = c("FID1" = "V1"))
gen <- left_join(gen, idnames, by = c("FID2" = "V1"))
#take only related
related <- subset(gen, criteria != "Unrelated")
ids_related <- data.frame(id = c(related$id.x, related$id.y)) %>% unique()
# add lms
gen <- left_join(gen, pheno_wide[,c("id", "LMS_min", "born")], by = c("id.x" = "id"))
gen <- left_join(gen, pheno_wide[,c("id", "LMS_min", "born")], by = c("id.y" = "id"))
gen <- left_join(gen, load[,c("id", "total_load")], by = c("id.x" = "id"))
gen <- left_join(gen, load[,c("id", "total_load")], by = c("id.y" = "id"))
names(gen)
gen <- gen %>% mutate(LMS_dif_abs = abs(LMS_min.x - LMS_min.y),
total_load_dif_abs = abs(total_load.x - total_load.y))
gen$criteria <- factor(gen$criteria, levels = c("Unrelated", "Full-sibling", "Parent-offspring", "Second-degree", "Third-degree", "Unknown"))
summary(glm(total_load_dif_abs ~ criteria, data = gen))
summary(glm(LMS_dif_abs ~ criteria, data = gen))
method="high"
load <- load_per_region %>% filter(loadtype == method)
load(file = "output/pop_gen/relatedness_all.RData")
gen <- left_join(gen, idnames, by = c("FID1" = "V1"))
gen <- left_join(gen, idnames, by = c("FID2" = "V1"))
#take only related
related <- subset(gen, criteria != "Unrelated")
ids_related <- data.frame(id = c(related$id.x, related$id.y)) %>% unique()
# add lms
gen <- left_join(gen, pheno_wide[,c("id", "LMS_min", "born")], by = c("id.x" = "id"))
gen <- left_join(gen, pheno_wide[,c("id", "LMS_min", "born")], by = c("id.y" = "id"))
gen <- left_join(gen, load[,c("id", "total_load")], by = c("id.x" = "id"))
gen <- left_join(gen, load[,c("id", "total_load")], by = c("id.y" = "id"))
names(gen)
gen <- gen %>% mutate(LMS_dif_abs = abs(LMS_min.x - LMS_min.y),
total_load_dif_abs = abs(total_load.x - total_load.y))
gen$criteria <- factor(gen$criteria, levels = c("Unrelated", "Full-sibling", "Parent-offspring", "Second-degree", "Third-degree", "Unknown"))
summary(glm(LMS_dif_abs ~ criteria, data = gen))
summary(glm(total_load_dif_abs ~ criteria, data = gen))
summary(lme4::glmer(LMS_dif_abs ~ criteria + (1|id.x) + (1|id.y), data = gen))
summary(lmerTest::lmer(LMS_dif_abs ~ criteria + (1|id.x) + (1|id.y), data = gen))
summary(lmerTest::lmer(total_load_dif_abs ~ criteria+ (1|id.x) + (1|id.y), data = gen))
method="gerp45"
load <- load_per_region %>% filter(loadtype == method)
load(file = "output/pop_gen/relatedness_all.RData")
gen <- left_join(gen, idnames, by = c("FID1" = "V1"))
gen <- left_join(gen, idnames, by = c("FID2" = "V1"))
#take only related
related <- subset(gen, criteria != "Unrelated")
ids_related <- data.frame(id = c(related$id.x, related$id.y)) %>% unique()
#related %>% select(c(id.x, id.y, criteria)) %>% View()
# add lms
gen <- left_join(gen, pheno_wide[,c("id", "LMS_min", "born")], by = c("id.x" = "id"))
gen <- left_join(gen, pheno_wide[,c("id", "LMS_min", "born")], by = c("id.y" = "id"))
gen <- left_join(gen, load[,c("id", "total_load")], by = c("id.x" = "id"))
gen <- left_join(gen, load[,c("id", "total_load")], by = c("id.y" = "id"))
names(gen)
gen <- gen %>% mutate(LMS_dif_abs = abs(LMS_min.x - LMS_min.y),
total_load_dif_abs = abs(total_load.x - total_load.y))
gen$criteria <- factor(gen$criteria, levels = c("Unrelated", "Full-sibling", "Parent-offspring", "Second-degree", "Third-degree", "Unknown"))
summary(lmerTest::lmer(LMS_dif_abs ~ criteria + (1|id.x) + (1|id.y), data = gen))
summary(lmerTest::lmer(total_load_dif_abs ~ criteria+ (1|id.x) + (1|id.y), data = gen))
### Packages ####
pacman::p_load(tidyverse, brms, bayesplot, data.table, ggridges, performance)
# theme
source("scripts/theme_ggplot.R")
#### Approach 2: both loads in the same model ####
load(file = "output/models/total_hom_het/lms_total_gerp45_high_sep.RData")
brm_load_gerp_high_sep <- brm_load_t
summary(brm_load_gerp_high_sep)
# gerp
load(file = "output/models/total_hom_het/lms_total_gerp45.RData")
brm_gerp <- brm_load_t
summary(brm_gerp)
# snpeff
load(file = "output/models/total_hom_het/lms_total_high.RData")
brm_high <- brm_load_t
r2_bayes(brm_high)
summary(brm_high)
